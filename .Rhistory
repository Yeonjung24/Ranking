mean(boot.data)
}
b <- foreach(i=1:999, .combine=c) %dopar% {
boot.data <- sample(x, n.obs, replace=TRUE)
mean(boot.data)
}
mean(b)
mean(muhat.boot)
set.seed(123)
x <- rnorm(n=500, mean=2, sd=4)
n.obs <- length(x)
b <- foreach(i=1:999, .combine=c) %dopar% {
boot.data <- sample(x, n.obs, replace=TRUE)
mean(boot.data)
}
mean(b)
B = 999
muhat.boot = rep(0, B)
nobs = length(x)
for (i in 1:B) {
boot.data = sample(x, nobs, replace=TRUE)
muhat.boot[i] = mean(boot.data)
}
mean(muhat.boot)
muhat.boot = rep(0, B)
nobs = length(x)
for (i in 1:B) {
boot.data = sample(x, nobs, replace=TRUE)
muhat.boot[i] = mean(boot.data)
}
mean(muhat.boot)
muhat.boot = rep(0, B)
nobs = length(x)
for (i in 1:B) {
boot.data = sample(x, nobs, replace=TRUE)
muhat.boot[i] = mean(boot.data)
}
mean(muhat.boot)
muhat.boot = rep(0, B)
nobs = length(x)
for (i in 1:B) {
set.seed(123)
boot.data = sample(x, nobs, replace=TRUE)
muhat.boot[i] = mean(boot.data)
}
mean(muhat.boot)
muhat.boot = rep(0, B)
nobs = length(x)
for (i in 1:B) {
set.seed(123)
boot.data = sample(x, nobs, replace=TRUE)
muhat.boot[i] = mean(boot.data)
}
mean(muhat.boot)
muhat.boot = rep(0, B)
nobs = length(x)
for (i in 1:B) {
set.seed(123)
boot.data = sample(x, nobs, replace=TRUE)
muhat.boot[i] = mean(boot.data)
}
mean(muhat.boot)
b <- foreach(i=1:999, .combine=c) %dopar% {
set.seed(123)
boot.data <- sample(x, n.obs, replace=TRUE)
mean(boot.data)
}
mean(b)
b <- foreach(i=1:999, .combine=c) %dopar% {
set.seed(123)
boot.data <- sample(x, n.obs, replace=TRUE)
mean(boot.data)
}
mean(b)
system.time({
b <- foreach(i=1:999, .combine=c) %dopar% {
set.seed(123)
boot.data <- sample(x, n.obs, replace=TRUE)
mean(boot.data)
}
})[3]
mean(b)
system.time({
B = 999
muhat.boot = rep(0, B)
nobs = length(x)
for (i in 1:B) {
set.seed(123)
boot.data = sample(x, nobs, replace=TRUE)
muhat.boot[i] = mean(boot.data)
}
})
mean(muhat.boot)
system.time({
B = 999
muhat.boot = rep(0, B)
nobs = length(x)
for (i in 1:B) {
set.seed(123)
boot.data = sample(x, nobs, replace=TRUE)
muhat.boot[i] = mean(boot.data)
}
})[3]
mean(muhat.boot)
system.time({
b <- foreach(i=1:999, .combine=c) %dopar% {
set.seed(123)
boot.data <- sample(x, n.obs, replace=TRUE)
mean(boot.data)
}
})[3]
mean(b)
system.time({
b <- foreach(i=1:9999, .combine=c) %dopar% {
set.seed(123)
boot.data <- sample(x, n.obs, replace=TRUE)
mean(boot.data)
}
})[3]
mean(b)
system.time({
B = 9999
muhat.boot = rep(0, B)
nobs = length(x)
for (i in 1:B) {
set.seed(123)
boot.data = sample(x, nobs, replace=TRUE)
muhat.boot[i] = mean(boot.data)
}
})[3]
mean(muhat.boot)
system.time({
b <- foreach(i=1:9999) %dopar% {
set.seed(123)
boot.data <- sample(x, n.obs, replace=TRUE)
mean(boot.data)
}
})[3]
mean(b)
system.time({
B = 9999
muhat.boot = rep(0, B)
nobs = length(x)
for (i in 1:B) {
set.seed(123)
boot.data = sample(x, nobs, replace=TRUE)
muhat.boot[i] = mean(boot.data)
}
})[3]
mean(muhat.boot)
system.time({
B = 9999
muhat.boot = rep(0, B)
nobs = length(x)
for (i in 1:B) {
set.seed(123)
boot.data = sample(x, nobs, replace=TRUE)
muhat.boot[i] = mean(boot.data)
}
})[3]
mean(muhat.boot)
system.time({
b <- foreach(i=1:9999) %dopar% {
set.seed(123)
boot.data <- sample(x, n.obs, replace=TRUE)
mean(boot.data)
}
})[3]
mean(unlist(b))
system.time({
B = 9999
muhat.boot = rep(0, B)
nobs = length(x)
for (i in 1:B) {
set.seed(123)
boot.data = sample(x, nobs, replace=TRUE)
muhat.boot[i] = mean(boot.data)
}
})[3]
mean(muhat.boot)
getDoParWorkers()
system.time({
B = 9999
muhat.boot = rep(0, B)
nobs = length(x)
for (i in 1:B) {
set.seed(123)
mean(x[sample(n.obs, replace=TRUE)])
}
})[3]
mean(muhat.boot)
system.time({
B = 9999
muhat.boot = rep(0, B)
nobs = length(x)
for (i in 1:B) {
set.seed(123)
muhat.boot[i] <- mean(x[sample(n.obs, replace=TRUE)])
}
})[3]
mean(muhat.boot)
system.time({
B = 9999
muhat.boot = rep(0, B)
nobs = length(x)
for (i in 1:B) {
set.seed(123)
muhat.boot[i] <- mean(x[sample(n.obs, replace=TRUE)])
}
})[3]
mean(muhat.boot)
system.time({
b <- foreach(i=1:9999) %dopar% {
set.seed(123)
boot.data <- sample(x, n.obs, replace=TRUE)
mean(boot.data)
}
})[3]
mean(unlist(b))
library(boot)
mean.boot <- function(x, idx) {
mean(x[idx])
}
b <- boot(x, statistic=mean.boot, R=9999)
mean(b$t)
system.time({
b <- boot(x, statistic=mean.boot, R=9999)
})
system.time({
b <- boot(x, statistic=mean.boot, R=9999)
})[3]
mean(b$t)
system.time({
b <- foreach(i=1:9999) %dopar% {
boot.data <- sample(x, n.obs, replace=TRUE)
mean(boot.data)
}
})[3]
rm(list=ls())
library(doMC)
library(boot)
registerDoMC()
set.seed(123)
x <- rnorm(n=500, mean=2, sd=4)
n.obs <- length(x)
B <- 9999
system.time({
b <- foreach(i=1:B) %dopar% {
mean(x[sample(n.obs, replace=TRUE)])
}
})[3]
mean(unlist(b))
system.time({
muhat.boot = rep(0, B)
for (i in 1:B) {
muhat.boot[i] <- mean(x[sample(n.obs, replace=TRUE)])
}
})[3]
mean(muhat.boot)
mean.boot <- function(x, idx) {
mean(x[idx])
}
system.time({
b <- boot(x, statistic=mean.boot, R=9999)
})[3]
mean(b$t)
system.time({
for (i in 1:B) {
muhat.boot1 <- c(muhat.boot, mean(x[sample(n.obs, replace=TRUE)]))
}
})[3]
mean(muhat.boot1)
system.time({
for (i in 1:B) {
muhat.boot1 <- c(muhat.boot1, mean(x[sample(n.obs, replace=TRUE)]))
}
})[3]
mean(muhat.boot1)
muhat.boot1 <- c()
system.time({
muhat.boot1 <- c()
for (i in 1:B) {
muhat.boot1 <- c(muhat.boot1, mean(x[sample(n.obs, replace=TRUE)]))
}
})[3]
mean(muhat.boot1)
# grow the vector
system.time({
muhat.boot1 <- c()
for (i in 1:B) {
muhat.boot1 <- c(muhat.boot1, mean(x[sample(n.obs, replace=TRUE)]))
}
})[3]
mean(muhat.boot1)
mean.boot <- function(x, idx) {
mean(x[idx])
}
system.time({
b <- boot(x, statistic=mean.boot, R=9999)
})[3]
mean(b$t)
system.time({
muhat.boot = rep(0, B)
for (i in 1:B) {
muhat.boot[i] <- mean(x[sample(n.obs, replace=TRUE)])
}
})[3]
mean(muhat.boot)
system.time({
muhat.boot = rep(0, B)
for (i in 1:B) {
muhat.boot[i] <- mean(x[sample(n.obs, replace=TRUE)])
}
})[3]
mean(muhat.boot)
rm(list=ls())
getDoParWorkers()
# generate some data
set.seed(123)
x <- rnorm(n=500, mean=2, sd=4)
n.obs <- length(x)
B <- 9999
# bootstrap the mean of a vector with foreach
t1 <- system.time({
b <- foreach(i=1:B) %dopar% {
mean(x[sample(n.obs, replace=TRUE)])
}
})[3]
m1 <- mean(unlist(b))
# brute force bootstrap with for loop and initialized vector
t2 <- system.time({
muhat.boot = rep(0, B)
for (i in 1:B) {
muhat.boot[i] <- mean(x[sample(n.obs, replace=TRUE)])
}
})[3]
m2 <- mean(muhat.boot)
###### brute force bootstrap with for loop and grow the vector #####
t3 <- system.time({
muhat.boot1 <- c()
for (i in 1:B) {
muhat.boot1 <- c(muhat.boot1, mean(x[sample(n.obs, replace=TRUE)]))
}
})[3]
m3 <- mean(muhat.boot1)
##### bootstrap with boot function from package boot #####
mean.boot <- function(x, idx) {
mean(x[idx])
}
t4 <- system.time({
b <- boot(x, statistic=mean.boot, R=9999)
})[3]
m4 <- mean(b$t)
library(parallel)
detectCores()
??registerDoParallel
library(doMC)
boot
library(boot)
boot
library(boot)
library(parallel)
cl <- makeCluster(detectCores()-1)
registerDoParallel(cl)
library(foreach)
install.packages("doParallel")
library(doParallel)
library(doParallel)
library(boot)
cl <- makeCluster(detectCores()-1)
registerDoParallel(cl)
# generate some data
set.seed(123)
x <- rnorm(n=500, mean=2, sd=4)
n.obs <- length(x)
B <- 9999
# bootstrap the mean of a vector with foreach
t1 <- system.time({
b <- foreach(i=1:B) %dopar% {
mean(x[sample(n.obs, replace=TRUE)])
}
})[3]
m1 <- mean(unlist(b))
t1
stopCluster(cl)
source('~/Documents/UW Comp Fin/Statistics-and-Data-Analysis/lectures-material/bootPar.R', echo=TRUE)
setwd("/Users/rossbennett/Documents/R Projects/Ranking")
source("/Users/rossbennett/Documents/R Projects/Ranking/r-functions/Rank.R")
source("/Users/rossbennett/Documents/R Projects/Ranking/r-functions/monthly-fun.R")
source("/Users/rossbennett/Documents/R Projects/Ranking/r-functions/Rank.R")
library(quantmod)
currency("USD")
library(FinancialInstrument)
currency("USD")
symbols <- c("XLY", "XLP", "XLE", "AGG", "IVV")
stock(symbols, currency="USD")
# get data for the symbols
getSymbols(symbols, from="2012-01-01", to="2012-12-31")
list.sym <- list()
for(i in 1:length(symbols)) {
list.sym[[symbols[i]]] <- get(symbols[i])
}
# create an xts object of monthly adjusted close prices
symbols.close1 <- do.call(merge, lapply(list.sym, monthlyAd))
symbols.close2 <- monthlyPrices(symbols)
all.equal(symbols.close1, symbols.close2)
list.sym <- list()
for(i in 1:length(symbols)) {
list.sym[[symbols[i]]] <- get(symbols[i])
}
# create an xts object of monthly adjusted close prices
symbols.close1 <- do.call(merge, lapply(list.sym, monthlyAd))
symbols.close2 <- monthlyPrices(symbols)
source("/Users/rossbennett/Documents/R Projects/Ranking/r-functions/Rank.R")
source("/Users/rossbennett/Documents/R Projects/Ranking/r-functions/monthly-fun.R")
all.equal(symbols.close1, symbols.close2)
symbols.close2 <- monthlyPrices(symbols)
all.equal(symbols.close1, symbols.close2)
m.ret1 <- ROC(x = symbols.close, n = 1, type = "discrete", na.pad = TRUE)
m.ret1 <- ROC(x = symbols.close1, n = 1, type = "discrete", na.pad = TRUE)
m.ret2 <- monthlyReturns(symbols)
all.equal(m.ret1, m.ret2)
r1a <- ROC(symbols.close1, n=3, type="discrete", na.pad=TRUE)
r1b <- applyRank(symbols.close1, rankFun=ROC, n=3, type="discrete", na.pad=TRUE)
all.equal(r1a, r1b)
source("/Users/rossbennett/Documents/R Projects/Ranking/r-functions/Rank.R")
r1a <- ROC(symbols.close1, n=3, type="discrete", na.pad=TRUE)
r1b <- applyRank(symbols.close1, rankFun=ROC, n=3, type="discrete", na.pad=TRUE)
all.equal(r1a, r1b)
all.equal(ave3ROC(symbols.close1, n=c(1, 3, 6)),
applyRank(symbols.close1, ave3ROC, n=c(1, 3, 6))
all.equal(ave3ROC(symbols.close1, n=c(1, 3, 6)),
applyRank(symbols.close1, ave3ROC, n=c(1, 3, 6)))
all.equal(ave3ROC(symbols.close1, n=c(4, 6, 8)),
applyRank(symbols.close1, ave3ROC, n=c(4, 6, 8)))
all.equal(weightAve3ROC(symbols.close1),
applyRank(symbols.close1, weightAve3ROC))
all.equal(weightAve3ROC(symbols.close1, n=c(2, 4, 6), weights=c(1/3, 1/3, 1/3),
applyRank(symbols.close1, weightAve3ROC, n=c(2, 4, 6), weights=c(1/3, 1/3, 1/3)))
all.equal(weightAve3ROC(symbols.close1, n=c(2, 4, 6), weights=c(1/3, 1/3, 1/3)),
applyRank(symbols.close1, weightAve3ROC, n=c(2, 4, 6), weights=c(1/3, 1/3, 1/3)))
all.equal(weightAve3ROC(symbols.close1, n=c(2, 3, 4), weights=c(1/4, 1/4, 1/2)),
applyRank(symbols.close1, weightAve3ROC, n=c(2, 3, 4), weights=c(1/4, 1/4, 1/2)))
all.equal(strengthROC(x=symbols.close1), applyRank(x=symbols.close1))
all.equal(strengthROC(x=symbols.close1),
applyRank(x=symbols.close1, rankFun=strengthROC))
all.equal(strengthROC(x=symbols.close1, roc_n=2, sd_n=4),
applyRank(x=symbols.close1, rankFun=strengthROC, roc_n=2, sd_n=4))
all.equal(strengthROC(x=symbols.close1, roc_n=3, sd_n=2),
applyRank(x=symbols.close1, rankFun=strengthROC, roc_n=3, sd_n=2))
all.equal(strengthAve3ROC(x=symbols.close1),
applyRank(x=symbols.close1, rankFun=strengthAve3ROC))
source("/Users/rossbennett/Documents/R Projects/Ranking/r-functions/Rank.R")
all.equal(strengthAve3ROC(x=symbols.close1),
applyRank(x=symbols.close1, rankFun=strengthAve3ROC))
all.equal(strengthROC(x=symbols.close1),
applyRank(x=symbols.close1, rankFun=strengthROC))
all.equal(strengthROC(x=symbols.close1, roc_n=2, sd_n=4),
applyRank(x=symbols.close1, rankFun=strengthROC, roc_n=2, sd_n=4))
applyRank(x=symbols.close1, rankFun=strengthROC, roc_n=3, sd_n=2)
strengthAve3ROC(x=symbols.close1)
wave <- weightAve3ROC(x, n, weights)
x=symbols.close1
n = c(1, 3, 6)
weights = c(1/3, 1/3, 1/3)
sd_n = 3
wave <- weightAve3ROC(x, n, weights)
sd <- apply(x, 2, runSD, n = sd_n)
reclass(sd, x)
out <- wave/sd
wave
out <- wave$x / sd
rank.obj <- rowRank(out)
source("/Users/rossbennett/Documents/R Projects/Ranking/r-functions/Rank.R")
source("/Users/rossbennett/Documents/R Projects/Ranking/r-functions/monthly-fun.R")
all.equal(strengthAve3ROC(x=symbols.close1),
applyRank(x=symbols.close1, rankFun=strengthAve3ROC))
all.equal(strengthAve3ROC(x=symbols.close1, n=c(2,4,6), weights=(.3, .4, .3), sd_n=2),
applyRank(x=symbols.close1, rankFun=strengthAve3ROC), n=c(2,4,6), weights=(.3, .4, .3), sd_n=2))
all.equal(strengthAve3ROC(x=symbols.close1, n=c(2,4,6), weights=(.3, .4, .3), sd_n=2),
all.equal(strengthAve3ROC(x=symbols.close1, n=c(2,4,6), weights=c(.3, .4, .3), sd_n=2),
applyRank(x=symbols.close1, rankFun=strengthAve3ROC, n=c(2,4,6), weights=c(.3, .4, .3), sd_n=2))
all.equal(etfReplayRank(x=symbols.close1),
applyRank(x=symbols.close1, rankFun=etfReplayRank))
all.equal(etfReplayRank(x=symbols.close1, n=c(2, 4, 6), w=c(0.2, 0.4, 0.4)),
applyRank(x=symbols.close1, rankFun=etfReplayRank, n=c(2, 4, 6), w=c(0.2, 0.4, 0.4)))
# strengthSMA
all.equal(strengthSMA(x=symbols.close1),
applyRank(x=symbols.close1, rankFun=strengthSMA))
x=symbols.close1
n=c(1, 3, 6)
roc1 <- ROC(x, n = n[1], type = "discrete")
roc2 <- ROC(x, n = n[2], type = "discrete")
roc3 <- ROC(x, n = n[3], type = "discrete")
ave <- (roc1 + roc2 + roc3)/3
rowRank(ave)
roc1 <- ROC(x, n = n[1], type = "discrete")
roc2 <- ROC(x, n = n[2], type = "discrete")
roc3 <- ROC(x, n = n[3], type = "discrete")
wave <- (roc1 * weights[1] + roc2 * weights[2] + roc3 * weights[3]) / sum(weights)
rowRank(wave)
roc_n = 3
sd_n = 3
roc <- ROC(x, n = roc_n, type = "discrete")
sd <- apply(x, 2, runSD, n = sd_n)
strength <- roc/sd
strength
rowRank(strength)
source('~/Documents/R Projects/Ranking/test-rank.R', echo=TRUE)
source('~/Documents/R Projects/Ranking/test-rank.R', echo=TRUE)
source('~/Documents/R Projects/Ranking/test-rank.R', echo=TRUE)
source('~/Documents/R Projects/Ranking/test-rank.R', echo=TRUE)
